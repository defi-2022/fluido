/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FluidoFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createNewToken(string,string,string,uint256)": FunctionFragment;
    "deployedTokens(uint256)": FunctionFragment;
    "getAllTokens()": FunctionFragment;
    "getTokensLength()": FunctionFragment;
    "getUserTokens()": FunctionFragment;
    "getUserTokensLength()": FunctionFragment;
    "mint(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "tokenDetails(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewToken",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDetails",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createNewToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class FluidoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FluidoFactoryInterface;

  functions: {
    createNewToken(
      _name: string,
      _symbol: string,
      _description: string,
      _rewardPercentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, BigNumber, BigNumber] & {
          tokenAddress: string;
          name: string;
          symbol: string;
          description: string;
          lockedLiquidity: BigNumber;
          rewardPercentage: BigNumber;
        })[]
      ]
    >;

    getTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, BigNumber, BigNumber] & {
          tokenAddress: string;
          name: string;
          symbol: string;
          description: string;
          lockedLiquidity: BigNumber;
          rewardPercentage: BigNumber;
        })[]
      ]
    >;

    getUserTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    tokenDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        description: string;
        lockedLiquidity: BigNumber;
        rewardPercentage: BigNumber;
      }
    >;

    withdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNewToken(
    _name: string,
    _symbol: string,
    _description: string,
    _rewardPercentage: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployedTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllTokens(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, BigNumber, BigNumber] & {
      tokenAddress: string;
      name: string;
      symbol: string;
      description: string;
      lockedLiquidity: BigNumber;
      rewardPercentage: BigNumber;
    })[]
  >;

  getTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokens(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, BigNumber, BigNumber] & {
      tokenAddress: string;
      name: string;
      symbol: string;
      description: string;
      lockedLiquidity: BigNumber;
      rewardPercentage: BigNumber;
    })[]
  >;

  getUserTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    tokenAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  tokenDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, BigNumber] & {
      tokenAddress: string;
      name: string;
      symbol: string;
      description: string;
      lockedLiquidity: BigNumber;
      rewardPercentage: BigNumber;
    }
  >;

  withdraw(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewToken(
      _name: string,
      _symbol: string,
      _description: string,
      _rewardPercentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllTokens(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, BigNumber, BigNumber] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        description: string;
        lockedLiquidity: BigNumber;
        rewardPercentage: BigNumber;
      })[]
    >;

    getTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokens(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, BigNumber, BigNumber] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        description: string;
        lockedLiquidity: BigNumber;
        rewardPercentage: BigNumber;
      })[]
    >;

    getUserTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    mint(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    tokenDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, BigNumber] & {
        tokenAddress: string;
        name: string;
        symbol: string;
        description: string;
        lockedLiquidity: BigNumber;
        rewardPercentage: BigNumber;
      }
    >;

    withdraw(tokenAddress: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createNewToken(
      _name: string,
      _symbol: string,
      _description: string,
      _rewardPercentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDetails(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewToken(
      _name: string,
      _symbol: string,
      _description: string,
      _rewardPercentage: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
